{"version":3,"sources":["InputMenu/index.js","ItemList/index.js","fireBase.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["InputMenu","react_default","a","createElement","className","onSubmit","this","props","handleAddItem","id","placeholder","value","currentItem","text","onChange","handleOnChange","onChangeSelect","type","Component","ItemList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","createRow","bind","assertThisInitialized","item","_this2","key","onClick","handleDeleteItem","entries","map","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Main","e","state","target","Date","now","setState","tag","newItem","preventDefault","items","push","database","ref","filter","console","log","concat","remove","orderByKey","on","snapshot","val","redItems","greenItems","purpleItems","blueItems","src_ItemList_0","src_InputMenu_0","App","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12c06ecc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\n\nclass InputMenu extends Component {\n\n  render() {\n    return(\n      <div className=\"inputMenu\">\n        <form onSubmit={this.props.handleAddItem}>\n          <input\n            id=\"input\"\n            placeholder=\"Tasks\"\n            value={this.props.currentItem.text}\n            onChange={this.props.handleOnChange}\n          />\n\n          <div className=\"select-style\">\n            <select onChange={this.props.onChangeSelect}>\n              <option value=\"4\">****</option>\n              <option value=\"3\">***</option>\n              <option value=\"2\">**</option>\n              <option value=\"1\">*</option>\n            </select>\n          </div>\n\n          <button id=\"submitButton\" type=\"submit\">Add Task</button>\n        </form>\n      </div>\n    )\n  }\n\n}\n\nexport default InputMenu;\n","import React, { Component } from 'react';\nimport './index.css';\n\nclass ItemList extends Component {\n  constructor(props) {\n    super(props);\n    this.createRow= this.createRow.bind(this);\n  }\n\n  createRow(item) {\n    return (\n      <li\n      key={item.key}\n      onClick={() => this.props.handleDeleteItem(item.id)}\n      >\n        {item.text}\n      </li>\n    )\n  }\n\n\n  render() {\n    return (\n        <ul className=\"todoList\">{this.props.entries.map(this.createRow)}</ul>\n    )\n  }\n}\n\nexport default ItemList\n","import firebase from 'firebase'\n\n// Initialize Firebase\nvar config = {\n  apiKey: \"AIzaSyDUzRtDjeL_1NJd31drCiolWYB3FuQGG6o\",\n  authDomain: \"react-will-do.firebaseapp.com\",\n  databaseURL: \"https://react-will-do.firebaseio.com\",\n  projectId: \"react-will-do\",\n  storageBucket: \"react-will-do.appspot.com\",\n  messagingSenderId: \"604869351549\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport InputMenu from '../InputMenu/index';\nimport ItemList from '../ItemList/index';\nimport firebase from '../fireBase';\n\n\nclass Main extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      items: [],\n      currentItem: {\n        text: '',\n        tag: '4',\n        id: '',\n      }\n    }\n  }\n\n  componentDidMount() {\n\n    let todoRef = firebase.database().ref('items').orderByKey();\n    todoRef.on('child_added', snapshot => {\n      let item = snapshot.val()\n      item.id = snapshot.key\n      console.log(item.id)\n      this.setState({\n        items: [item].concat(this.state.items)\n      })\n    })\n  }\n\n  // componentDidMount() {\n  //\n  //   // fetch data from local storage\n  //   if (localStorage.hasOwnProperty(\"items\")) {\n  //     const itemsInJson = localStorage.getItem(\"items\")\n  //     const items = JSON.parse(itemsInJson)\n  //     this.setState({\n  //       \"items\": items\n  //     })\n  //   }\n  //\n  //   window.addEventListener(\n  //     \"beforeunload\",\n  //     this.saveToLocalStorage.bind(this)\n  //   );\n  // }\n  //\n  // saveToLocalStorage() {\n  //   localStorage.setItem(\"items\", JSON.stringify(this.state.items));\n  // }\n\n\n  // inputField onChange listener\n  handleOnChange = (e) => {\n    let currentItem = this.state.currentItem\n    currentItem.text = e.target.value\n    currentItem.key = Date.now()\n\n    this.setState({ currentItem })\n  }\n\n  // SelectMenu listener\n  onChangeSelect = (e) => {\n    const tag = e.target.value\n    let newItem = this.state.currentItem\n    newItem.tag = tag\n\n    this.setState({ newItem })\n  }\n\n  // AddTask button listener\n  handleAddItem = (e) => {\n    e.preventDefault()\n    if (this.state.currentItem.text === '') {\n      return\n    }\n    // update items\n    const items = this.state.items\n    items.push(this.state.currentItem)\n\n    /* Send data to Firebase */\n    firebase.database().ref('items').push( this.state.currentItem );\n\n    this.setState({ items })\n\n    // empty current item\n    let currentItem = this.state.currentItem\n    const tag = currentItem.tag\n    currentItem = {\n      text: '',\n      tag: tag\n    }\n\n    this.setState({ currentItem })\n  }\n\n  handleDeleteItem = (id) => {\n    let items = this.state.items.filter(item => item.id !== id)\n    console.log(id)\n    console.log('rannnnnnnn')\n    const itemRef= firebase.database().ref(`/items/${id}`)\n    itemRef.remove()\n    this.setState({ items })\n\n  }\n\n  render() {\n    const redItems = this.state.items.filter(item => item.tag === '4')\n    const greenItems = this.state.items.filter(item => item.tag === '3')\n    const purpleItems = this.state.items.filter(item => item.tag === '2')\n    const blueItems = this.state.items.filter(item => item.tag === '1')\n\n\n    return(\n      <div className=\"App\">\n\n        <div id=\"sectionRed\">\n          <ItemList\n            entries={redItems}\n            handleDeleteItem={this.handleDeleteItem}\n           />\n        </div>\n\n        <div id=\"sectionGreen\">\n          <ItemList\n            entries={greenItems}\n            handleDeleteItem={this.handleDeleteItem}\n           />\n        </div>\n\n        <div id=\"sectionPurple\">\n          <ItemList\n            entries={purpleItems}\n            handleDeleteItem={this.handleDeleteItem}\n           />\n        </div>\n\n        <div id=\"sectionBlue\">\n          <ItemList\n            entries={blueItems}\n            handleDeleteItem={this.handleDeleteItem}\n           />\n        </div>\n\n          <InputMenu\n            handleOnChange={this.handleOnChange}\n            handleAddItem={this.handleAddItem}\n            currentItem={this.state.currentItem}\n            onChangeSelect={this.onChangeSelect}\n          />\n\n      </div>\n    )\n  }\n\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Main from './Main/index';\nimport './Main/index.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Main />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}